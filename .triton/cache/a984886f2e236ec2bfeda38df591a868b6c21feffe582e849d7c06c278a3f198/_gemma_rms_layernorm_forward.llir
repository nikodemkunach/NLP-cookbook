; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @_gemma_rms_layernorm_forward(ptr addrspace(1) %0, i32 %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, float %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 3, !dbg !11
  %14 = and i32 %13, 2040, !dbg !11
  %15 = or disjoint i32 %14, 2048, !dbg !11
  %16 = icmp slt i32 %14, %6, !dbg !12
  %17 = icmp slt i32 %15, %6, !dbg !12
  %18 = mul i32 %9, %3, !dbg !13
  %19 = sext i32 %18 to i64, !dbg !14
  %20 = getelementptr half, ptr addrspace(1) %2, i64 %19, !dbg !14
  %21 = zext nneg i32 %14 to i64, !dbg !15
  %22 = getelementptr half, ptr addrspace(1) %20, i64 %21, !dbg !15
  %23 = zext nneg i32 %15 to i64, !dbg !15
  %24 = getelementptr half, ptr addrspace(1) %20, i64 %23, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %extelt.offset = lshr i32 %26, 16, !dbg !16
  %extelt.offset1 = lshr i32 %27, 16, !dbg !16
  %extelt.offset2 = lshr i32 %28, 16, !dbg !16
  %extelt.offset3 = lshr i32 %29, 16, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %extelt.offset4 = lshr i32 %31, 16, !dbg !16
  %extelt.offset5 = lshr i32 %32, 16, !dbg !16
  %extelt.offset6 = lshr i32 %33, 16, !dbg !16
  %extelt.offset7 = lshr i32 %34, 16, !dbg !16
  %35 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !16
  %36 = insertelement <2 x i32> %35, i32 %extelt.offset, i64 1, !dbg !16
  %37 = trunc <2 x i32> %36 to <2 x i16>, !dbg !16
  %38 = bitcast <2 x i16> %37 to <2 x half>, !dbg !16
  %39 = fpext <2 x half> %38 to <2 x float>, !dbg !17
  %40 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !16
  %41 = insertelement <2 x i32> %40, i32 %extelt.offset1, i64 1, !dbg !16
  %42 = trunc <2 x i32> %41 to <2 x i16>, !dbg !16
  %43 = bitcast <2 x i16> %42 to <2 x half>, !dbg !16
  %44 = fpext <2 x half> %43 to <2 x float>, !dbg !17
  %45 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !16
  %46 = insertelement <2 x i32> %45, i32 %extelt.offset2, i64 1, !dbg !16
  %47 = trunc <2 x i32> %46 to <2 x i16>, !dbg !16
  %48 = bitcast <2 x i16> %47 to <2 x half>, !dbg !16
  %49 = fpext <2 x half> %48 to <2 x float>, !dbg !17
  %50 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %51 = insertelement <2 x i32> %50, i32 %extelt.offset3, i64 1, !dbg !16
  %52 = trunc <2 x i32> %51 to <2 x i16>, !dbg !16
  %53 = bitcast <2 x i16> %52 to <2 x half>, !dbg !16
  %54 = fpext <2 x half> %53 to <2 x float>, !dbg !17
  %55 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !16
  %56 = insertelement <2 x i32> %55, i32 %extelt.offset4, i64 1, !dbg !16
  %57 = trunc <2 x i32> %56 to <2 x i16>, !dbg !16
  %58 = bitcast <2 x i16> %57 to <2 x half>, !dbg !16
  %59 = fpext <2 x half> %58 to <2 x float>, !dbg !17
  %60 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !16
  %61 = insertelement <2 x i32> %60, i32 %extelt.offset5, i64 1, !dbg !16
  %62 = trunc <2 x i32> %61 to <2 x i16>, !dbg !16
  %63 = bitcast <2 x i16> %62 to <2 x half>, !dbg !16
  %64 = fpext <2 x half> %63 to <2 x float>, !dbg !17
  %65 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !16
  %66 = insertelement <2 x i32> %65, i32 %extelt.offset6, i64 1, !dbg !16
  %67 = trunc <2 x i32> %66 to <2 x i16>, !dbg !16
  %68 = bitcast <2 x i16> %67 to <2 x half>, !dbg !16
  %69 = fpext <2 x half> %68 to <2 x float>, !dbg !17
  %70 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !16
  %71 = insertelement <2 x i32> %70, i32 %extelt.offset7, i64 1, !dbg !16
  %72 = trunc <2 x i32> %71 to <2 x i16>, !dbg !16
  %73 = bitcast <2 x i16> %72 to <2 x half>, !dbg !16
  %74 = fpext <2 x half> %73 to <2 x float>, !dbg !17
  %75 = getelementptr half, ptr addrspace(1) %4, i64 %21, !dbg !18
  %76 = getelementptr half, ptr addrspace(1) %4, i64 %23, !dbg !18
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %75, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !19
  %79 = fmul <2 x float> %39, %39, !dbg !20
  %80 = fmul <2 x float> %39, %39, !dbg !20
  %81 = fmul <2 x float> %44, %44, !dbg !20
  %82 = fmul <2 x float> %44, %44, !dbg !20
  %83 = fmul <2 x float> %49, %49, !dbg !20
  %84 = fmul <2 x float> %49, %49, !dbg !20
  %85 = fmul <2 x float> %54, %54, !dbg !20
  %86 = fmul <2 x float> %54, %54, !dbg !20
  %87 = fmul <2 x float> %59, %59, !dbg !20
  %88 = fmul <2 x float> %64, %64, !dbg !20
  %89 = fmul <2 x float> %69, %69, !dbg !20
  %90 = fmul <2 x float> %74, %74, !dbg !20
  %shift = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %91 = fadd <2 x float> %79, %shift, !dbg !21
  %92 = fadd <2 x float> %81, %91, !dbg !21
  %shift16 = shufflevector <2 x float> %82, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %93 = fadd <2 x float> %shift16, %92, !dbg !21
  %94 = fadd <2 x float> %83, %93, !dbg !21
  %shift17 = shufflevector <2 x float> %84, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %95 = fadd <2 x float> %shift17, %94, !dbg !21
  %96 = fadd <2 x float> %85, %95, !dbg !21
  %shift18 = shufflevector <2 x float> %86, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %97 = fadd <2 x float> %shift18, %96, !dbg !21
  %98 = fadd <2 x float> %87, %97, !dbg !21
  %shift19 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %99 = fadd <2 x float> %shift19, %98, !dbg !21
  %100 = fadd <2 x float> %88, %99, !dbg !21
  %shift20 = shufflevector <2 x float> %88, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %101 = fadd <2 x float> %shift20, %100, !dbg !21
  %102 = fadd <2 x float> %89, %101, !dbg !21
  %shift21 = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %103 = fadd <2 x float> %shift21, %102, !dbg !21
  %104 = fadd <2 x float> %90, %103, !dbg !21
  %shift22 = shufflevector <2 x float> %90, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !21
  %105 = fadd <2 x float> %shift22, %104, !dbg !21
  %106 = extractelement <2 x float> %105, i64 0, !dbg !21
  %107 = bitcast float %106 to i32, !dbg !26
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 16, i32 31), !dbg !26
  %109 = bitcast i32 %108 to float, !dbg !26
  %110 = fadd float %106, %109, !dbg !21
  %111 = bitcast float %110 to i32, !dbg !26
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 8, i32 31), !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = fadd float %110, %113, !dbg !21
  %115 = bitcast float %114 to i32, !dbg !26
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 4, i32 31), !dbg !26
  %117 = bitcast i32 %116 to float, !dbg !26
  %118 = fadd float %114, %117, !dbg !21
  %119 = bitcast float %118 to i32, !dbg !26
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 2, i32 31), !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = fadd float %118, %121, !dbg !21
  %123 = bitcast float %122 to i32, !dbg !26
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !26
  %125 = bitcast i32 %124 to float, !dbg !26
  %126 = fadd float %122, %125, !dbg !21
  %127 = icmp eq i32 %11, 0, !dbg !26
  %128 = and i32 %12, 7, !dbg !26
  %129 = zext nneg i32 %128 to i64, !dbg !26
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i64 %129, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, float %126, i1 %127) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %131 = icmp slt i32 %10, 8, !dbg !26
  %132 = sext i32 %10 to i64, !dbg !26
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i64 %132, !dbg !26
  %134 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %133, i1 %131) #5, !dbg !26
  %135 = bitcast float %134 to i32, !dbg !26
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !26
  %137 = bitcast i32 %136 to float, !dbg !26
  %138 = fadd float %134, %137, !dbg !21
  %139 = bitcast float %138 to i32, !dbg !26
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !26
  %141 = bitcast i32 %140 to float, !dbg !26
  %142 = fadd float %138, %141, !dbg !21
  %143 = bitcast float %142 to i32, !dbg !26
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !26
  %145 = bitcast i32 %144 to float, !dbg !26
  %146 = fadd float %142, %145, !dbg !21
  %147 = and i32 %10, 7, !dbg !26
  %148 = icmp eq i32 %147, 0, !dbg !26
  %149 = and i1 %131, %148, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, float %146, i1 %149) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %150 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %151 = sitofp i32 %6 to float, !dbg !27
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float %151) #5, !dbg !27
  %153 = fadd float %152, %7, !dbg !28
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %154, 0, !dbg !29
  br i1 %.not.i, label %157, label %155, !dbg !29

155:                                              ; preds = %8
  %156 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %153), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

157:                                              ; preds = %8
  %158 = tail call float @llvm.nvvm.rsqrt.approx.f(float %153), !dbg !29
  br label %__nv_rsqrtf.exit, !dbg !29

__nv_rsqrtf.exit:                                 ; preds = %155, %157
  %.0.i = phi float [ %156, %155 ], [ %158, %157 ], !dbg !29
  %159 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !19
  %extelt.offset15 = lshr i32 %159, 16, !dbg !19
  %160 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !19
  %extelt.offset14 = lshr i32 %160, 16, !dbg !19
  %161 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !19
  %extelt.offset13 = lshr i32 %161, 16, !dbg !19
  %162 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !19
  %extelt.offset12 = lshr i32 %162, 16, !dbg !19
  %163 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !19
  %extelt.offset11 = lshr i32 %163, 16, !dbg !19
  %164 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !19
  %extelt.offset10 = lshr i32 %164, 16, !dbg !19
  %165 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !19
  %extelt.offset9 = lshr i32 %165, 16, !dbg !19
  %166 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !19
  %extelt.offset8 = lshr i32 %166, 16, !dbg !19
  %167 = sext i32 %9 to i64, !dbg !30
  %168 = getelementptr float, ptr addrspace(1) %5, i64 %167, !dbg !30
  %169 = mul i32 %9, %1, !dbg !31
  %170 = sext i32 %169 to i64, !dbg !32
  %171 = getelementptr half, ptr addrspace(1) %0, i64 %170, !dbg !32
  %172 = icmp eq i32 %10, 0, !dbg !33
  %173 = bitcast float %.0.i to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %168, i1 %172) #5, !dbg !33
  %174 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !34
  %175 = shufflevector <2 x float> %174, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !34
  %176 = fmul <2 x float> %175, %39, !dbg !34
  %177 = fmul <2 x float> %175, %44, !dbg !34
  %178 = fmul <2 x float> %175, %49, !dbg !34
  %179 = fmul <2 x float> %175, %54, !dbg !34
  %180 = fmul <2 x float> %175, %59, !dbg !34
  %181 = fmul <2 x float> %175, %64, !dbg !34
  %182 = fmul <2 x float> %175, %69, !dbg !34
  %183 = fmul <2 x float> %175, %74, !dbg !34
  %184 = getelementptr half, ptr addrspace(1) %171, i64 %21, !dbg !35
  %185 = getelementptr half, ptr addrspace(1) %171, i64 %23, !dbg !35
  %186 = insertelement <2 x i32> poison, i32 %166, i64 0, !dbg !19
  %187 = insertelement <2 x i32> %186, i32 %extelt.offset8, i64 1, !dbg !19
  %188 = trunc <2 x i32> %187 to <2 x i16>, !dbg !19
  %189 = bitcast <2 x i16> %188 to <2 x half>, !dbg !19
  %190 = fpext <2 x half> %189 to <2 x float>, !dbg !36
  %191 = fadd <2 x float> %190, <float 1.000000e+00, float 1.000000e+00>, !dbg !37
  %192 = fmul <2 x float> %191, %176, !dbg !38
  %193 = fptrunc <2 x float> %192 to <2 x half>, !dbg !39
  %194 = insertelement <2 x i32> poison, i32 %165, i64 0, !dbg !19
  %195 = insertelement <2 x i32> %194, i32 %extelt.offset9, i64 1, !dbg !19
  %196 = trunc <2 x i32> %195 to <2 x i16>, !dbg !19
  %197 = bitcast <2 x i16> %196 to <2 x half>, !dbg !19
  %198 = fpext <2 x half> %197 to <2 x float>, !dbg !36
  %199 = fadd <2 x float> %198, <float 1.000000e+00, float 1.000000e+00>, !dbg !37
  %200 = fmul <2 x float> %199, %177, !dbg !38
  %201 = fptrunc <2 x float> %200 to <2 x half>, !dbg !39
  %202 = insertelement <2 x i32> poison, i32 %164, i64 0, !dbg !19
  %203 = insertelement <2 x i32> %202, i32 %extelt.offset10, i64 1, !dbg !19
  %204 = trunc <2 x i32> %203 to <2 x i16>, !dbg !19
  %205 = bitcast <2 x i16> %204 to <2 x half>, !dbg !19
  %206 = fpext <2 x half> %205 to <2 x float>, !dbg !36
  %207 = fadd <2 x float> %206, <float 1.000000e+00, float 1.000000e+00>, !dbg !37
  %208 = fmul <2 x float> %207, %178, !dbg !38
  %209 = fptrunc <2 x float> %208 to <2 x half>, !dbg !39
  %210 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !19
  %211 = insertelement <2 x i32> %210, i32 %extelt.offset11, i64 1, !dbg !19
  %212 = trunc <2 x i32> %211 to <2 x i16>, !dbg !19
  %213 = bitcast <2 x i16> %212 to <2 x half>, !dbg !19
  %214 = fpext <2 x half> %213 to <2 x float>, !dbg !36
  %215 = fadd <2 x float> %214, <float 1.000000e+00, float 1.000000e+00>, !dbg !37
  %216 = fmul <2 x float> %215, %179, !dbg !38
  %217 = fptrunc <2 x float> %216 to <2 x half>, !dbg !39
  %218 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !19
  %219 = insertelement <2 x i32> %218, i32 %extelt.offset12, i64 1, !dbg !19
  %220 = trunc <2 x i32> %219 to <2 x i16>, !dbg !19
  %221 = bitcast <2 x i16> %220 to <2 x half>, !dbg !19
  %222 = fpext <2 x half> %221 to <2 x float>, !dbg !36
  %223 = fadd <2 x float> %222, <float 1.000000e+00, float 1.000000e+00>, !dbg !37
  %224 = fmul <2 x float> %223, %180, !dbg !38
  %225 = fptrunc <2 x float> %224 to <2 x half>, !dbg !39
  %226 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !19
  %227 = insertelement <2 x i32> %226, i32 %extelt.offset13, i64 1, !dbg !19
  %228 = trunc <2 x i32> %227 to <2 x i16>, !dbg !19
  %229 = bitcast <2 x i16> %228 to <2 x half>, !dbg !19
  %230 = fpext <2 x half> %229 to <2 x float>, !dbg !36
  %231 = fadd <2 x float> %230, <float 1.000000e+00, float 1.000000e+00>, !dbg !37
  %232 = fmul <2 x float> %231, %181, !dbg !38
  %233 = fptrunc <2 x float> %232 to <2 x half>, !dbg !39
  %234 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !19
  %235 = insertelement <2 x i32> %234, i32 %extelt.offset14, i64 1, !dbg !19
  %236 = trunc <2 x i32> %235 to <2 x i16>, !dbg !19
  %237 = bitcast <2 x i16> %236 to <2 x half>, !dbg !19
  %238 = fpext <2 x half> %237 to <2 x float>, !dbg !36
  %239 = fadd <2 x float> %238, <float 1.000000e+00, float 1.000000e+00>, !dbg !37
  %240 = fmul <2 x float> %239, %182, !dbg !38
  %241 = fptrunc <2 x float> %240 to <2 x half>, !dbg !39
  %242 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !19
  %243 = insertelement <2 x i32> %242, i32 %extelt.offset15, i64 1, !dbg !19
  %244 = trunc <2 x i32> %243 to <2 x i16>, !dbg !19
  %245 = bitcast <2 x i16> %244 to <2 x half>, !dbg !19
  %246 = fpext <2 x half> %245 to <2 x float>, !dbg !36
  %247 = fadd <2 x float> %246, <float 1.000000e+00, float 1.000000e+00>, !dbg !37
  %248 = fmul <2 x float> %247, %183, !dbg !38
  %249 = fptrunc <2 x float> %248 to <2 x half>, !dbg !39
  %250 = bitcast <2 x half> %193 to i32, !dbg !39
  %251 = bitcast <2 x half> %201 to i32, !dbg !39
  %252 = bitcast <2 x half> %209 to i32, !dbg !39
  %253 = bitcast <2 x half> %217 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %250, i32 %251, i32 %252, i32 %253, ptr addrspace(1) %184, i1 %16) #5, !dbg !39
  %254 = bitcast <2 x half> %225 to i32, !dbg !39
  %255 = bitcast <2 x half> %233 to i32, !dbg !39
  %256 = bitcast <2 x half> %241 to i32, !dbg !39
  %257 = bitcast <2 x half> %249 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %255, i32 %256, i32 %257, ptr addrspace(1) %185, i1 %17) #5, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rms_layernorm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/unsloth/kernels")
!4 = !{ptr @_gemma_rms_layernorm_forward, !"kernel", i32 1}
!5 = !{ptr @_gemma_rms_layernorm_forward, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_gemma_rms_layernorm_forward", linkageName: "_gemma_rms_layernorm_forward", scope: !3, file: !3, line: 103, type: !8, scopeLine: 103, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 114, column: 28, scope: !7)
!11 = !DILocation(line: 115, column: 31, scope: !7)
!12 = !DILocation(line: 116, column: 25, scope: !7)
!13 = !DILocation(line: 119, column: 19, scope: !7)
!14 = !DILocation(line: 119, column: 9, scope: !7)
!15 = !DILocation(line: 122, column: 24, scope: !7)
!16 = !DILocation(line: 122, column: 20, scope: !7)
!17 = !DILocation(line: 122, column: 64, scope: !7)
!18 = !DILocation(line: 123, column: 24, scope: !7)
!19 = !DILocation(line: 123, column: 20, scope: !7)
!20 = !DILocation(line: 125, column: 29, scope: !7)
!21 = !DILocation(line: 256, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/triton/language")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 125, column: 21, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !25)
!27 = !DILocation(line: 125, column: 48, scope: !7)
!28 = !DILocation(line: 126, column: 38, scope: !7)
!29 = !DILocation(line: 126, column: 28, scope: !7)
!30 = !DILocation(line: 120, column: 9, scope: !7)
!31 = !DILocation(line: 118, column: 19, scope: !7)
!32 = !DILocation(line: 118, column: 9, scope: !7)
!33 = !DILocation(line: 127, column: 16, scope: !7)
!34 = !DILocation(line: 128, column: 21, scope: !7)
!35 = !DILocation(line: 131, column: 17, scope: !7)
!36 = !DILocation(line: 123, column: 64, scope: !7)
!37 = !DILocation(line: 129, column: 31, scope: !7)
!38 = !DILocation(line: 129, column: 23, scope: !7)
!39 = !DILocation(line: 131, column: 30, scope: !7)
!40 = !DILocation(line: 131, column: 4, scope: !7)
