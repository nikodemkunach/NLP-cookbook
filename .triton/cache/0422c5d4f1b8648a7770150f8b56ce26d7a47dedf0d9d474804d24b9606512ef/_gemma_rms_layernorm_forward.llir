; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @_gemma_rms_layernorm_forward(ptr addrspace(1) %0, i32 %1, ptr addrspace(1) %2, i32 %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, float %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 3, !dbg !11
  %14 = and i32 %13, 2040, !dbg !11
  %15 = or disjoint i32 %14, 2048, !dbg !11
  %16 = icmp slt i32 %14, %6, !dbg !12
  %17 = icmp slt i32 %15, %6, !dbg !12
  %18 = mul i32 %9, %3, !dbg !13
  %19 = sext i32 %18 to i64, !dbg !14
  %20 = getelementptr i16, ptr addrspace(1) %2, i64 %19, !dbg !14
  %21 = zext nneg i32 %14 to i64, !dbg !15
  %22 = getelementptr i16, ptr addrspace(1) %20, i64 %21, !dbg !15
  %23 = zext nneg i32 %15 to i64, !dbg !15
  %24 = getelementptr i16, ptr addrspace(1) %20, i64 %23, !dbg !15
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !16
  %30 = trunc i32 %26 to i16, !dbg !16
  %extelt.offset = lshr i32 %26, 16, !dbg !16
  %31 = trunc nuw i32 %extelt.offset to i16, !dbg !16
  %32 = trunc i32 %27 to i16, !dbg !16
  %extelt.offset1 = lshr i32 %27, 16, !dbg !16
  %33 = trunc nuw i32 %extelt.offset1 to i16, !dbg !16
  %34 = trunc i32 %28 to i16, !dbg !16
  %extelt.offset2 = lshr i32 %28, 16, !dbg !16
  %35 = trunc nuw i32 %extelt.offset2 to i16, !dbg !16
  %36 = trunc i32 %29 to i16, !dbg !16
  %extelt.offset3 = lshr i32 %29, 16, !dbg !16
  %37 = trunc nuw i32 %extelt.offset3 to i16, !dbg !16
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !16
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !16
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !16
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !16
  %43 = trunc i32 %39 to i16, !dbg !16
  %extelt.offset4 = lshr i32 %39, 16, !dbg !16
  %44 = trunc nuw i32 %extelt.offset4 to i16, !dbg !16
  %45 = trunc i32 %40 to i16, !dbg !16
  %extelt.offset5 = lshr i32 %40, 16, !dbg !16
  %46 = trunc nuw i32 %extelt.offset5 to i16, !dbg !16
  %47 = trunc i32 %41 to i16, !dbg !16
  %extelt.offset6 = lshr i32 %41, 16, !dbg !16
  %48 = trunc nuw i32 %extelt.offset6 to i16, !dbg !16
  %49 = trunc i32 %42 to i16, !dbg !16
  %extelt.offset7 = lshr i32 %42, 16, !dbg !16
  %50 = trunc nuw i32 %extelt.offset7 to i16, !dbg !16
  %51 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %30) #5, !dbg !17
  %52 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %31) #5, !dbg !17
  %53 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %32) #5, !dbg !17
  %54 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %33) #5, !dbg !17
  %55 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %34) #5, !dbg !17
  %56 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %35) #5, !dbg !17
  %57 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %36) #5, !dbg !17
  %58 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %37) #5, !dbg !17
  %59 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %43) #5, !dbg !17
  %60 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %44) #5, !dbg !17
  %61 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %45) #5, !dbg !17
  %62 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %46) #5, !dbg !17
  %63 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %47) #5, !dbg !17
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %48) #5, !dbg !17
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %49) #5, !dbg !17
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %50) #5, !dbg !17
  %67 = getelementptr i16, ptr addrspace(1) %4, i64 %21, !dbg !18
  %68 = getelementptr i16, ptr addrspace(1) %4, i64 %23, !dbg !18
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #5, !dbg !19
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !19
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !19
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !19
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !19
  %74 = trunc i32 %70 to i16, !dbg !19
  %extelt.offset8 = lshr i32 %70, 16, !dbg !19
  %75 = trunc nuw i32 %extelt.offset8 to i16, !dbg !19
  %76 = trunc i32 %71 to i16, !dbg !19
  %extelt.offset9 = lshr i32 %71, 16, !dbg !19
  %77 = trunc nuw i32 %extelt.offset9 to i16, !dbg !19
  %78 = trunc i32 %72 to i16, !dbg !19
  %extelt.offset10 = lshr i32 %72, 16, !dbg !19
  %79 = trunc nuw i32 %extelt.offset10 to i16, !dbg !19
  %80 = trunc i32 %73 to i16, !dbg !19
  %extelt.offset11 = lshr i32 %73, 16, !dbg !19
  %81 = trunc nuw i32 %extelt.offset11 to i16, !dbg !19
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !19
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !19
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !19
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !19
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !19
  %87 = trunc i32 %83 to i16, !dbg !19
  %extelt.offset12 = lshr i32 %83, 16, !dbg !19
  %88 = trunc nuw i32 %extelt.offset12 to i16, !dbg !19
  %89 = trunc i32 %84 to i16, !dbg !19
  %extelt.offset13 = lshr i32 %84, 16, !dbg !19
  %90 = trunc nuw i32 %extelt.offset13 to i16, !dbg !19
  %91 = trunc i32 %85 to i16, !dbg !19
  %extelt.offset14 = lshr i32 %85, 16, !dbg !19
  %92 = trunc nuw i32 %extelt.offset14 to i16, !dbg !19
  %93 = trunc i32 %86 to i16, !dbg !19
  %extelt.offset15 = lshr i32 %86, 16, !dbg !19
  %94 = trunc nuw i32 %extelt.offset15 to i16, !dbg !19
  %95 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %74) #5, !dbg !20
  %96 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %75) #5, !dbg !20
  %97 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %76) #5, !dbg !20
  %98 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %77) #5, !dbg !20
  %99 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %78) #5, !dbg !20
  %100 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %79) #5, !dbg !20
  %101 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %80) #5, !dbg !20
  %102 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %81) #5, !dbg !20
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %87) #5, !dbg !20
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %88) #5, !dbg !20
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %89) #5, !dbg !20
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %90) #5, !dbg !20
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %91) #5, !dbg !20
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %92) #5, !dbg !20
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %93) #5, !dbg !20
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(i16 %94) #5, !dbg !20
  %111 = fmul float %51, %51, !dbg !21
  %112 = fmul float %52, %52, !dbg !21
  %113 = fmul float %53, %53, !dbg !21
  %114 = fmul float %54, %54, !dbg !21
  %115 = fmul float %55, %55, !dbg !21
  %116 = fmul float %56, %56, !dbg !21
  %117 = fmul float %57, %57, !dbg !21
  %118 = fmul float %58, %58, !dbg !21
  %119 = fmul float %59, %59, !dbg !21
  %120 = fmul float %60, %60, !dbg !21
  %121 = fmul float %61, %61, !dbg !21
  %122 = fmul float %62, %62, !dbg !21
  %123 = fmul float %63, %63, !dbg !21
  %124 = fmul float %64, %64, !dbg !21
  %125 = fmul float %65, %65, !dbg !21
  %126 = fmul float %66, %66, !dbg !21
  %127 = fadd float %111, %112, !dbg !22
  %128 = fadd float %127, %113, !dbg !22
  %129 = fadd float %128, %114, !dbg !22
  %130 = fadd float %129, %115, !dbg !22
  %131 = fadd float %130, %116, !dbg !22
  %132 = fadd float %131, %117, !dbg !22
  %133 = fadd float %132, %118, !dbg !22
  %134 = fadd float %133, %119, !dbg !22
  %135 = fadd float %134, %120, !dbg !22
  %136 = fadd float %135, %121, !dbg !22
  %137 = fadd float %136, %122, !dbg !22
  %138 = fadd float %137, %123, !dbg !22
  %139 = fadd float %138, %124, !dbg !22
  %140 = fadd float %139, %125, !dbg !22
  %141 = fadd float %140, %126, !dbg !22
  %142 = bitcast float %141 to i32, !dbg !27
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 16, i32 31), !dbg !27
  %144 = bitcast i32 %143 to float, !dbg !27
  %145 = fadd float %141, %144, !dbg !22
  %146 = bitcast float %145 to i32, !dbg !27
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 8, i32 31), !dbg !27
  %148 = bitcast i32 %147 to float, !dbg !27
  %149 = fadd float %145, %148, !dbg !22
  %150 = bitcast float %149 to i32, !dbg !27
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !27
  %152 = bitcast i32 %151 to float, !dbg !27
  %153 = fadd float %149, %152, !dbg !22
  %154 = bitcast float %153 to i32, !dbg !27
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 2, i32 31), !dbg !27
  %156 = bitcast i32 %155 to float, !dbg !27
  %157 = fadd float %153, %156, !dbg !22
  %158 = bitcast float %157 to i32, !dbg !27
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !27
  %160 = bitcast i32 %159 to float, !dbg !27
  %161 = fadd float %157, %160, !dbg !22
  %162 = icmp eq i32 %11, 0, !dbg !27
  %163 = and i32 %12, 7, !dbg !27
  %164 = zext nneg i32 %163 to i64, !dbg !27
  %165 = getelementptr float, ptr addrspace(3) @global_smem, i64 %164, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, float %161, i1 %162) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %166 = icmp slt i32 %10, 8, !dbg !27
  %167 = sext i32 %10 to i64, !dbg !27
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i64 %167, !dbg !27
  %169 = tail call float asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %168, i1 %166) #5, !dbg !27
  %170 = bitcast float %169 to i32, !dbg !27
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 4, i32 31), !dbg !27
  %172 = bitcast i32 %171 to float, !dbg !27
  %173 = fadd float %169, %172, !dbg !22
  %174 = bitcast float %173 to i32, !dbg !27
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 2, i32 31), !dbg !27
  %176 = bitcast i32 %175 to float, !dbg !27
  %177 = fadd float %173, %176, !dbg !22
  %178 = bitcast float %177 to i32, !dbg !27
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !27
  %180 = bitcast i32 %179 to float, !dbg !27
  %181 = fadd float %177, %180, !dbg !22
  %182 = and i32 %10, 7, !dbg !27
  %183 = icmp eq i32 %182, 0, !dbg !27
  %184 = and i1 %166, %183, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, float %181, i1 %184) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %185 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %186 = sitofp i32 %6 to float, !dbg !28
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %186) #5, !dbg !28
  %188 = fadd float %187, %7, !dbg !29
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !30
  %.not.i = icmp eq i32 %189, 0, !dbg !30
  br i1 %.not.i, label %192, label %190, !dbg !30

190:                                              ; preds = %8
  %191 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %188), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

192:                                              ; preds = %8
  %193 = tail call float @llvm.nvvm.rsqrt.approx.f(float %188), !dbg !30
  br label %__nv_rsqrtf.exit, !dbg !30

__nv_rsqrtf.exit:                                 ; preds = %190, %192
  %.0.i = phi float [ %191, %190 ], [ %193, %192 ], !dbg !30
  %194 = sext i32 %9 to i64, !dbg !31
  %195 = getelementptr float, ptr addrspace(1) %5, i64 %194, !dbg !31
  %196 = mul i32 %9, %1, !dbg !32
  %197 = sext i32 %196 to i64, !dbg !33
  %198 = getelementptr i16, ptr addrspace(1) %0, i64 %197, !dbg !33
  %199 = icmp eq i32 %10, 0, !dbg !34
  %200 = bitcast float %.0.i to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %195, i1 %199) #5, !dbg !34
  %201 = fmul float %51, %.0.i, !dbg !35
  %202 = fmul float %52, %.0.i, !dbg !35
  %203 = fmul float %53, %.0.i, !dbg !35
  %204 = fmul float %54, %.0.i, !dbg !35
  %205 = fmul float %55, %.0.i, !dbg !35
  %206 = fmul float %56, %.0.i, !dbg !35
  %207 = fmul float %57, %.0.i, !dbg !35
  %208 = fmul float %58, %.0.i, !dbg !35
  %209 = fmul float %59, %.0.i, !dbg !35
  %210 = fmul float %60, %.0.i, !dbg !35
  %211 = fmul float %61, %.0.i, !dbg !35
  %212 = fmul float %62, %.0.i, !dbg !35
  %213 = fmul float %63, %.0.i, !dbg !35
  %214 = fmul float %64, %.0.i, !dbg !35
  %215 = fmul float %65, %.0.i, !dbg !35
  %216 = fmul float %66, %.0.i, !dbg !35
  %217 = fadd float %95, 1.000000e+00, !dbg !36
  %218 = fadd float %96, 1.000000e+00, !dbg !36
  %219 = fadd float %97, 1.000000e+00, !dbg !36
  %220 = fadd float %98, 1.000000e+00, !dbg !36
  %221 = fadd float %99, 1.000000e+00, !dbg !36
  %222 = fadd float %100, 1.000000e+00, !dbg !36
  %223 = fadd float %101, 1.000000e+00, !dbg !36
  %224 = fadd float %102, 1.000000e+00, !dbg !36
  %225 = fadd float %103, 1.000000e+00, !dbg !36
  %226 = fadd float %104, 1.000000e+00, !dbg !36
  %227 = fadd float %105, 1.000000e+00, !dbg !36
  %228 = fadd float %106, 1.000000e+00, !dbg !36
  %229 = fadd float %107, 1.000000e+00, !dbg !36
  %230 = fadd float %108, 1.000000e+00, !dbg !36
  %231 = fadd float %109, 1.000000e+00, !dbg !36
  %232 = fadd float %110, 1.000000e+00, !dbg !36
  %233 = fmul float %217, %201, !dbg !37
  %234 = fmul float %218, %202, !dbg !37
  %235 = fmul float %219, %203, !dbg !37
  %236 = fmul float %220, %204, !dbg !37
  %237 = fmul float %221, %205, !dbg !37
  %238 = fmul float %222, %206, !dbg !37
  %239 = fmul float %223, %207, !dbg !37
  %240 = fmul float %224, %208, !dbg !37
  %241 = fmul float %225, %209, !dbg !37
  %242 = fmul float %226, %210, !dbg !37
  %243 = fmul float %227, %211, !dbg !37
  %244 = fmul float %228, %212, !dbg !37
  %245 = fmul float %229, %213, !dbg !37
  %246 = fmul float %230, %214, !dbg !37
  %247 = fmul float %231, %215, !dbg !37
  %248 = fmul float %232, %216, !dbg !37
  %249 = getelementptr i16, ptr addrspace(1) %198, i64 %21, !dbg !38
  %250 = getelementptr i16, ptr addrspace(1) %198, i64 %23, !dbg !38
  %251 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %233) #5, !dbg !39
  %252 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %234) #5, !dbg !39
  %253 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %235) #5, !dbg !39
  %254 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %236) #5, !dbg !39
  %255 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %237) #5, !dbg !39
  %256 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %238) #5, !dbg !39
  %257 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %239) #5, !dbg !39
  %258 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %240) #5, !dbg !39
  %259 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %241) #5, !dbg !39
  %260 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %242) #5, !dbg !39
  %261 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %243) #5, !dbg !39
  %262 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %244) #5, !dbg !39
  %263 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %245) #5, !dbg !39
  %264 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %246) #5, !dbg !39
  %265 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %247) #5, !dbg !39
  %266 = tail call i16 asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %248) #5, !dbg !39
  %267 = insertelement <2 x i16> poison, i16 %251, i64 0, !dbg !39
  %268 = insertelement <2 x i16> %267, i16 %252, i64 1, !dbg !39
  %269 = bitcast <2 x i16> %268 to i32, !dbg !39
  %270 = insertelement <2 x i16> poison, i16 %253, i64 0, !dbg !39
  %271 = insertelement <2 x i16> %270, i16 %254, i64 1, !dbg !39
  %272 = bitcast <2 x i16> %271 to i32, !dbg !39
  %273 = insertelement <2 x i16> poison, i16 %255, i64 0, !dbg !39
  %274 = insertelement <2 x i16> %273, i16 %256, i64 1, !dbg !39
  %275 = bitcast <2 x i16> %274 to i32, !dbg !39
  %276 = insertelement <2 x i16> poison, i16 %257, i64 0, !dbg !39
  %277 = insertelement <2 x i16> %276, i16 %258, i64 1, !dbg !39
  %278 = bitcast <2 x i16> %277 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %269, i32 %272, i32 %275, i32 %278, ptr addrspace(1) %249, i1 %16) #5, !dbg !39
  %279 = insertelement <2 x i16> poison, i16 %259, i64 0, !dbg !39
  %280 = insertelement <2 x i16> %279, i16 %260, i64 1, !dbg !39
  %281 = bitcast <2 x i16> %280 to i32, !dbg !39
  %282 = insertelement <2 x i16> poison, i16 %261, i64 0, !dbg !39
  %283 = insertelement <2 x i16> %282, i16 %262, i64 1, !dbg !39
  %284 = bitcast <2 x i16> %283 to i32, !dbg !39
  %285 = insertelement <2 x i16> poison, i16 %263, i64 0, !dbg !39
  %286 = insertelement <2 x i16> %285, i16 %264, i64 1, !dbg !39
  %287 = bitcast <2 x i16> %286 to i32, !dbg !39
  %288 = insertelement <2 x i16> poison, i16 %265, i64 0, !dbg !39
  %289 = insertelement <2 x i16> %288, i16 %266, i64 1, !dbg !39
  %290 = bitcast <2 x i16> %289 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %284, i32 %287, i32 %290, ptr addrspace(1) %250, i1 %17) #5, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rms_layernorm.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/unsloth/kernels")
!4 = !{ptr @_gemma_rms_layernorm_forward, !"kernel", i32 1}
!5 = !{ptr @_gemma_rms_layernorm_forward, !"maxntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "_gemma_rms_layernorm_forward", linkageName: "_gemma_rms_layernorm_forward", scope: !3, file: !3, line: 103, type: !8, scopeLine: 103, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 114, column: 28, scope: !7)
!11 = !DILocation(line: 115, column: 31, scope: !7)
!12 = !DILocation(line: 116, column: 25, scope: !7)
!13 = !DILocation(line: 119, column: 19, scope: !7)
!14 = !DILocation(line: 119, column: 9, scope: !7)
!15 = !DILocation(line: 122, column: 24, scope: !7)
!16 = !DILocation(line: 122, column: 20, scope: !7)
!17 = !DILocation(line: 122, column: 64, scope: !7)
!18 = !DILocation(line: 123, column: 24, scope: !7)
!19 = !DILocation(line: 123, column: 20, scope: !7)
!20 = !DILocation(line: 123, column: 64, scope: !7)
!21 = !DILocation(line: 125, column: 29, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 125, column: 21, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 125, column: 48, scope: !7)
!29 = !DILocation(line: 126, column: 38, scope: !7)
!30 = !DILocation(line: 126, column: 28, scope: !7)
!31 = !DILocation(line: 120, column: 9, scope: !7)
!32 = !DILocation(line: 118, column: 19, scope: !7)
!33 = !DILocation(line: 118, column: 9, scope: !7)
!34 = !DILocation(line: 127, column: 16, scope: !7)
!35 = !DILocation(line: 128, column: 21, scope: !7)
!36 = !DILocation(line: 129, column: 31, scope: !7)
!37 = !DILocation(line: 129, column: 23, scope: !7)
!38 = !DILocation(line: 131, column: 17, scope: !7)
!39 = !DILocation(line: 131, column: 30, scope: !7)
!40 = !DILocation(line: 131, column: 4, scope: !7)
