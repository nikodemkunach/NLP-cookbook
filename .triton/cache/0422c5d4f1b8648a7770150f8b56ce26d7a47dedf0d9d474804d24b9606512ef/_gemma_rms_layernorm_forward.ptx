//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_89
.address_size 64

	// .globl	_gemma_rms_layernorm_forward
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};

.visible .entry _gemma_rms_layernorm_forward(
	.param .u64 _gemma_rms_layernorm_forward_param_0,
	.param .u32 _gemma_rms_layernorm_forward_param_1,
	.param .u64 _gemma_rms_layernorm_forward_param_2,
	.param .u32 _gemma_rms_layernorm_forward_param_3,
	.param .u64 _gemma_rms_layernorm_forward_param_4,
	.param .u64 _gemma_rms_layernorm_forward_param_5,
	.param .u32 _gemma_rms_layernorm_forward_param_6,
	.param .f32 _gemma_rms_layernorm_forward_param_7
)
.maxntid 256, 1, 1
{
	.reg .pred 	%p<28>;
	.reg .b16 	%rs<49>;
	.reg .b32 	%r<138>;
	.reg .f32 	%f<119>;
	.reg .b64 	%rd<18>;
	.loc	1 103 0
$L__func_begin0:
	.loc	1 103 0

	ld.param.u64 	%rd8, [_gemma_rms_layernorm_forward_param_0];
	ld.param.u32 	%r100, [_gemma_rms_layernorm_forward_param_1];
$L__tmp0:
	.loc	1 114 28
	// begin inline asm
	mov.u32 %r1, %ctaid.x;
	// end inline asm
	ld.param.u64 	%rd9, [_gemma_rms_layernorm_forward_param_2];
	.loc	1 115 31
	mov.u32 	%r101, %tid.x;
	and.b32  	%r102, %r101, 31;
	ld.param.u32 	%r103, [_gemma_rms_layernorm_forward_param_3];
	ld.param.u64 	%rd10, [_gemma_rms_layernorm_forward_param_4];
	shl.b32 	%r104, %r101, 3;
	ld.param.u64 	%rd11, [_gemma_rms_layernorm_forward_param_5];
	and.b32  	%r105, %r104, 2040;
	ld.param.u32 	%r106, [_gemma_rms_layernorm_forward_param_6];
	or.b32  	%r107, %r105, 2048;
	ld.param.f32 	%f1, [_gemma_rms_layernorm_forward_param_7];
	.loc	1 116 25
	setp.lt.s32 	%p1, %r105, %r106;
	setp.lt.s32 	%p6, %r107, %r106;
	.loc	1 119 19
	mul.lo.s32 	%r108, %r1, %r103;
	.loc	1 119 9
	mul.wide.s32 	%rd12, %r108, 2;
	add.s64 	%rd13, %rd9, %rd12;
	.loc	1 122 24
	mul.wide.u32 	%rd14, %r105, 2;
	add.s64 	%rd1, %rd13, %rd14;
	add.s64 	%rd2, %rd1, 4096;
	mov.b32 	%r6, 0;
	.loc	1 122 20
	// begin inline asm
	mov.u32 %r2, 0x0;
	mov.u32 %r3, 0x0;
	mov.u32 %r4, 0x0;
	mov.u32 %r5, 0x0;
	@%p1 ld.global.v4.b32 { %r2, %r3, %r4, %r5 }, [ %rd1 + 0 ];
	@!%p1 mov.u32 %r2, %r6;
	@!%p1 mov.u32 %r3, %r6;
	@!%p1 mov.u32 %r4, %r6;
	@!%p1 mov.u32 %r5, %r6;
	// end inline asm
	cvt.u16.u32 	%rs1, %r2;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs2}, %r2; }
	cvt.u16.u32 	%rs3, %r3;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs4}, %r3; }
	cvt.u16.u32 	%rs5, %r4;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs6}, %r4; }
	cvt.u16.u32 	%rs7, %r5;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs8}, %r5; }
	// begin inline asm
	mov.u32 %r10, 0x0;
	mov.u32 %r11, 0x0;
	mov.u32 %r12, 0x0;
	mov.u32 %r13, 0x0;
	@%p6 ld.global.v4.b32 { %r10, %r11, %r12, %r13 }, [ %rd2 + 0 ];
	@!%p6 mov.u32 %r10, %r6;
	@!%p6 mov.u32 %r11, %r6;
	@!%p6 mov.u32 %r12, %r6;
	@!%p6 mov.u32 %r13, %r6;
	// end inline asm
	cvt.u16.u32 	%rs9, %r10;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs10}, %r10; }
	cvt.u16.u32 	%rs11, %r11;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs12}, %r11; }
	cvt.u16.u32 	%rs13, %r12;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs14}, %r12; }
	cvt.u16.u32 	%rs15, %r13;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs16}, %r13; }
	.loc	1 122 64
	// begin inline asm
	cvt.f32.bf16 %r18, %rs1;
	// end inline asm
	mov.b32 	%f2, %r18;
	// begin inline asm
	cvt.f32.bf16 %r19, %rs2;
	// end inline asm
	mov.b32 	%f3, %r19;
	// begin inline asm
	cvt.f32.bf16 %r20, %rs3;
	// end inline asm
	mov.b32 	%f4, %r20;
	// begin inline asm
	cvt.f32.bf16 %r21, %rs4;
	// end inline asm
	mov.b32 	%f5, %r21;
	// begin inline asm
	cvt.f32.bf16 %r22, %rs5;
	// end inline asm
	mov.b32 	%f6, %r22;
	// begin inline asm
	cvt.f32.bf16 %r23, %rs6;
	// end inline asm
	mov.b32 	%f7, %r23;
	// begin inline asm
	cvt.f32.bf16 %r24, %rs7;
	// end inline asm
	mov.b32 	%f8, %r24;
	// begin inline asm
	cvt.f32.bf16 %r25, %rs8;
	// end inline asm
	mov.b32 	%f9, %r25;
	// begin inline asm
	cvt.f32.bf16 %r26, %rs9;
	// end inline asm
	mov.b32 	%f10, %r26;
	// begin inline asm
	cvt.f32.bf16 %r27, %rs10;
	// end inline asm
	mov.b32 	%f11, %r27;
	// begin inline asm
	cvt.f32.bf16 %r28, %rs11;
	// end inline asm
	mov.b32 	%f12, %r28;
	// begin inline asm
	cvt.f32.bf16 %r29, %rs12;
	// end inline asm
	mov.b32 	%f13, %r29;
	// begin inline asm
	cvt.f32.bf16 %r30, %rs13;
	// end inline asm
	mov.b32 	%f14, %r30;
	// begin inline asm
	cvt.f32.bf16 %r31, %rs14;
	// end inline asm
	mov.b32 	%f15, %r31;
	// begin inline asm
	cvt.f32.bf16 %r32, %rs15;
	// end inline asm
	mov.b32 	%f16, %r32;
	// begin inline asm
	cvt.f32.bf16 %r33, %rs16;
	// end inline asm
	mov.b32 	%f17, %r33;
	.loc	1 123 24
	add.s64 	%rd3, %rd10, %rd14;
	add.s64 	%rd4, %rd3, 4096;
	.loc	1 123 20
	// begin inline asm
	mov.u32 %r34, 0x0;
	mov.u32 %r35, 0x0;
	mov.u32 %r36, 0x0;
	mov.u32 %r37, 0x0;
	@%p1 ld.global.v4.b32 { %r34, %r35, %r36, %r37 }, [ %rd3 + 0 ];
	@!%p1 mov.u32 %r34, %r6;
	@!%p1 mov.u32 %r35, %r6;
	@!%p1 mov.u32 %r36, %r6;
	@!%p1 mov.u32 %r37, %r6;
	// end inline asm
	cvt.u16.u32 	%rs17, %r34;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs18}, %r34; }
	cvt.u16.u32 	%rs19, %r35;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs20}, %r35; }
	cvt.u16.u32 	%rs21, %r36;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs22}, %r36; }
	cvt.u16.u32 	%rs23, %r37;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs24}, %r37; }
	// begin inline asm
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	mov.u32 %r44, 0x0;
	mov.u32 %r45, 0x0;
	@%p6 ld.global.v4.b32 { %r42, %r43, %r44, %r45 }, [ %rd4 + 0 ];
	@!%p6 mov.u32 %r42, %r6;
	@!%p6 mov.u32 %r43, %r6;
	@!%p6 mov.u32 %r44, %r6;
	@!%p6 mov.u32 %r45, %r6;
	// end inline asm
	cvt.u16.u32 	%rs25, %r42;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs26}, %r42; }
	cvt.u16.u32 	%rs27, %r43;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs28}, %r43; }
	cvt.u16.u32 	%rs29, %r44;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs30}, %r44; }
	cvt.u16.u32 	%rs31, %r45;
	{ .reg .b16 tmp; mov.b32 {tmp, %rs32}, %r45; }
	.loc	1 123 64
	// begin inline asm
	cvt.f32.bf16 %r50, %rs17;
	// end inline asm
	mov.b32 	%f18, %r50;
	// begin inline asm
	cvt.f32.bf16 %r51, %rs18;
	// end inline asm
	mov.b32 	%f19, %r51;
	// begin inline asm
	cvt.f32.bf16 %r52, %rs19;
	// end inline asm
	mov.b32 	%f20, %r52;
	// begin inline asm
	cvt.f32.bf16 %r53, %rs20;
	// end inline asm
	mov.b32 	%f21, %r53;
	// begin inline asm
	cvt.f32.bf16 %r54, %rs21;
	// end inline asm
	mov.b32 	%f22, %r54;
	// begin inline asm
	cvt.f32.bf16 %r55, %rs22;
	// end inline asm
	mov.b32 	%f23, %r55;
	// begin inline asm
	cvt.f32.bf16 %r56, %rs23;
	// end inline asm
	mov.b32 	%f24, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs24;
	// end inline asm
	mov.b32 	%f25, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs25;
	// end inline asm
	mov.b32 	%f26, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs26;
	// end inline asm
	mov.b32 	%f27, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs27;
	// end inline asm
	mov.b32 	%f28, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs28;
	// end inline asm
	mov.b32 	%f29, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs29;
	// end inline asm
	mov.b32 	%f30, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs30;
	// end inline asm
	mov.b32 	%f31, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs31;
	// end inline asm
	mov.b32 	%f32, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs32;
	// end inline asm
	mov.b32 	%f33, %r65;
	.loc	1 125 29
	mul.f32 	%f34, %f3, %f3;
$L__tmp1:
	.loc	2 256 15
	fma.rn.f32 	%f35, %f2, %f2, %f34;
	fma.rn.f32 	%f36, %f4, %f4, %f35;
	fma.rn.f32 	%f37, %f5, %f5, %f36;
	fma.rn.f32 	%f38, %f6, %f6, %f37;
	fma.rn.f32 	%f39, %f7, %f7, %f38;
	fma.rn.f32 	%f40, %f8, %f8, %f39;
	fma.rn.f32 	%f41, %f9, %f9, %f40;
	fma.rn.f32 	%f42, %f10, %f10, %f41;
	fma.rn.f32 	%f43, %f11, %f11, %f42;
	fma.rn.f32 	%f44, %f12, %f12, %f43;
	fma.rn.f32 	%f45, %f13, %f13, %f44;
	fma.rn.f32 	%f46, %f14, %f14, %f45;
	fma.rn.f32 	%f47, %f15, %f15, %f46;
	fma.rn.f32 	%f48, %f16, %f16, %f47;
	fma.rn.f32 	%f49, %f17, %f17, %f48;
	.loc	2 267 36
	mov.b32 	%r109, %f49;
	shfl.sync.bfly.b32	%r110, %r109, 16, 31, -1;
	mov.b32 	%f50, %r110;
	.loc	2 256 15
	add.f32 	%f51, %f49, %f50;
	.loc	2 267 36
	mov.b32 	%r111, %f51;
	shfl.sync.bfly.b32	%r112, %r111, 8, 31, -1;
	mov.b32 	%f52, %r112;
	.loc	2 256 15
	add.f32 	%f53, %f51, %f52;
	.loc	2 267 36
	mov.b32 	%r113, %f53;
	shfl.sync.bfly.b32	%r114, %r113, 4, 31, -1;
	mov.b32 	%f54, %r114;
	.loc	2 256 15
	add.f32 	%f55, %f53, %f54;
	.loc	2 267 36
	mov.b32 	%r115, %f55;
	shfl.sync.bfly.b32	%r116, %r115, 2, 31, -1;
	mov.b32 	%f56, %r116;
	.loc	2 256 15
	add.f32 	%f57, %f55, %f56;
	.loc	2 267 36
	mov.b32 	%r117, %f57;
	shfl.sync.bfly.b32	%r118, %r117, 1, 31, -1;
	mov.b32 	%f58, %r118;
	.loc	2 256 15
	add.f32 	%f59, %f57, %f58;
	.loc	2 267 36
	setp.eq.s32 	%p21, %r102, 0;
	shr.u32 	%r119, %r101, 3;
	and.b32  	%r120, %r119, 28;
	mov.u32 	%r121, global_smem;
	add.s32 	%r66, %r121, %r120;
	mov.b32 	%r67, %f59;
	// begin inline asm
	@%p21 st.shared.b32 [ %r66 + 0 ], %r67;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p22, %r101, 8;
	shl.b32 	%r122, %r101, 2;
	add.s32 	%r69, %r121, %r122;
	// begin inline asm
	@%p22 ld.shared.b32 %r68, [ %r69 + 0 ];
	// end inline asm
	mov.b32 	%f60, %r68;
	shfl.sync.bfly.b32	%r123, %r68, 4, 31, -1;
	mov.b32 	%f61, %r123;
	.loc	2 256 15
	add.f32 	%f62, %f60, %f61;
	.loc	2 267 36
	mov.b32 	%r124, %f62;
	shfl.sync.bfly.b32	%r125, %r124, 2, 31, -1;
	mov.b32 	%f63, %r125;
	.loc	2 256 15
	add.f32 	%f64, %f62, %f63;
	.loc	2 267 36
	mov.b32 	%r126, %f64;
	shfl.sync.bfly.b32	%r127, %r126, 1, 31, -1;
	mov.b32 	%f65, %r127;
	.loc	2 256 15
	add.f32 	%f66, %f64, %f65;
	.loc	2 267 36
	and.b32  	%r128, %r101, 7;
	setp.eq.s32 	%p27, %r128, 0;
	and.pred  	%p23, %p22, %p27;
	mov.b32 	%r71, %f66;
	// begin inline asm
	@%p23 st.shared.b32 [ %r69 + 0 ], %r71;
	// end inline asm
	bar.sync 	0;
$L__tmp2:
	.loc	1 125 48
	cvt.rn.f32.s32 	%f67, %r106;
	mov.b32 	%r74, %f67;
	ld.shared.u32 	%r73, [global_smem];
	// begin inline asm
	div.full.f32 %r72, %r73, %r74;
	// end inline asm
	mov.b32 	%f68, %r72;
	.loc	1 126 38
	add.f32 	%f69, %f68, %f1;
	.loc	1 126 28
	rsqrt.approx.ftz.f32 	%f70, %f69;
	.loc	1 120 9
	mul.wide.s32 	%rd15, %r1, 4;
	add.s64 	%rd5, %rd11, %rd15;
	.loc	1 118 19
	mul.lo.s32 	%r129, %r1, %r100;
	.loc	1 118 9
	mul.wide.s32 	%rd16, %r129, 2;
	add.s64 	%rd17, %rd8, %rd16;
	.loc	1 127 16
	setp.eq.s32 	%p24, %r101, 0;
	mov.b32 	%r75, %f70;
	// begin inline asm
	@%p24 st.global.b32 [ %rd5 + 0 ], { %r75 };
	// end inline asm
	.loc	1 128 21
	mul.f32 	%f71, %f2, %f70;
	mul.f32 	%f72, %f3, %f70;
	mul.f32 	%f73, %f4, %f70;
	mul.f32 	%f74, %f5, %f70;
	mul.f32 	%f75, %f6, %f70;
	mul.f32 	%f76, %f7, %f70;
	mul.f32 	%f77, %f8, %f70;
	mul.f32 	%f78, %f9, %f70;
	mul.f32 	%f79, %f10, %f70;
	mul.f32 	%f80, %f11, %f70;
	mul.f32 	%f81, %f12, %f70;
	mul.f32 	%f82, %f13, %f70;
	mul.f32 	%f83, %f14, %f70;
	mul.f32 	%f84, %f15, %f70;
	mul.f32 	%f85, %f16, %f70;
	mul.f32 	%f86, %f17, %f70;
	.loc	1 129 31
	add.f32 	%f87, %f18, 0f3F800000;
	add.f32 	%f88, %f19, 0f3F800000;
	add.f32 	%f89, %f20, 0f3F800000;
	add.f32 	%f90, %f21, 0f3F800000;
	add.f32 	%f91, %f22, 0f3F800000;
	add.f32 	%f92, %f23, 0f3F800000;
	add.f32 	%f93, %f24, 0f3F800000;
	add.f32 	%f94, %f25, 0f3F800000;
	add.f32 	%f95, %f26, 0f3F800000;
	add.f32 	%f96, %f27, 0f3F800000;
	add.f32 	%f97, %f28, 0f3F800000;
	add.f32 	%f98, %f29, 0f3F800000;
	add.f32 	%f99, %f30, 0f3F800000;
	add.f32 	%f100, %f31, 0f3F800000;
	add.f32 	%f101, %f32, 0f3F800000;
	add.f32 	%f102, %f33, 0f3F800000;
	.loc	1 129 23
	mul.f32 	%f103, %f87, %f71;
	mul.f32 	%f104, %f88, %f72;
	mul.f32 	%f105, %f89, %f73;
	mul.f32 	%f106, %f90, %f74;
	mul.f32 	%f107, %f91, %f75;
	mul.f32 	%f108, %f92, %f76;
	mul.f32 	%f109, %f93, %f77;
	mul.f32 	%f110, %f94, %f78;
	mul.f32 	%f111, %f95, %f79;
	mul.f32 	%f112, %f96, %f80;
	mul.f32 	%f113, %f97, %f81;
	mul.f32 	%f114, %f98, %f82;
	mul.f32 	%f115, %f99, %f83;
	mul.f32 	%f116, %f100, %f84;
	mul.f32 	%f117, %f101, %f85;
	mul.f32 	%f118, %f102, %f86;
	.loc	1 131 17
	add.s64 	%rd6, %rd17, %rd14;
	add.s64 	%rd7, %rd6, 4096;
	.loc	1 131 30
	mov.b32 	%r76, %f103;
	// begin inline asm
	cvt.rn.bf16.f32 %rs33, %r76;
	// end inline asm
	mov.b32 	%r77, %f104;
	// begin inline asm
	cvt.rn.bf16.f32 %rs34, %r77;
	// end inline asm
	mov.b32 	%r78, %f105;
	// begin inline asm
	cvt.rn.bf16.f32 %rs35, %r78;
	// end inline asm
	mov.b32 	%r79, %f106;
	// begin inline asm
	cvt.rn.bf16.f32 %rs36, %r79;
	// end inline asm
	mov.b32 	%r80, %f107;
	// begin inline asm
	cvt.rn.bf16.f32 %rs37, %r80;
	// end inline asm
	mov.b32 	%r81, %f108;
	// begin inline asm
	cvt.rn.bf16.f32 %rs38, %r81;
	// end inline asm
	mov.b32 	%r82, %f109;
	// begin inline asm
	cvt.rn.bf16.f32 %rs39, %r82;
	// end inline asm
	mov.b32 	%r83, %f110;
	// begin inline asm
	cvt.rn.bf16.f32 %rs40, %r83;
	// end inline asm
	mov.b32 	%r84, %f111;
	// begin inline asm
	cvt.rn.bf16.f32 %rs41, %r84;
	// end inline asm
	mov.b32 	%r85, %f112;
	// begin inline asm
	cvt.rn.bf16.f32 %rs42, %r85;
	// end inline asm
	mov.b32 	%r86, %f113;
	// begin inline asm
	cvt.rn.bf16.f32 %rs43, %r86;
	// end inline asm
	mov.b32 	%r87, %f114;
	// begin inline asm
	cvt.rn.bf16.f32 %rs44, %r87;
	// end inline asm
	mov.b32 	%r88, %f115;
	// begin inline asm
	cvt.rn.bf16.f32 %rs45, %r88;
	// end inline asm
	mov.b32 	%r89, %f116;
	// begin inline asm
	cvt.rn.bf16.f32 %rs46, %r89;
	// end inline asm
	mov.b32 	%r90, %f117;
	// begin inline asm
	cvt.rn.bf16.f32 %rs47, %r90;
	// end inline asm
	mov.b32 	%r91, %f118;
	// begin inline asm
	cvt.rn.bf16.f32 %rs48, %r91;
	// end inline asm
	mov.b32 	%r130, {%rs33, %rs34};
	mov.b32 	%r131, {%rs35, %rs36};
	mov.b32 	%r132, {%rs37, %rs38};
	mov.b32 	%r133, {%rs39, %rs40};
	// begin inline asm
	@%p1 st.global.v4.b32 [ %rd6 + 0 ], { %r130, %r131, %r132, %r133 };
	// end inline asm
	mov.b32 	%r134, {%rs41, %rs42};
	mov.b32 	%r135, {%rs43, %rs44};
	mov.b32 	%r136, {%rs45, %rs46};
	mov.b32 	%r137, {%rs47, %rs48};
	// begin inline asm
	@%p6 st.global.v4.b32 [ %rd7 + 0 ], { %r134, %r135, %r136, %r137 };
	// end inline asm
	.loc	1 131 4
	ret;
$L__tmp3:
$L__func_end0:

}
	.file	1 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/unsloth/kernels/rms_layernorm.py"
	.file	2 "/home/zeus/miniconda3/envs/cloudspace/lib/python3.11/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 1
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 2
.b8 46
.b8 0
.b8 3
.b8 8
.b8 32
.b8 11
.b8 0
.b8 0
.b8 3
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 49
.b8 19
.b8 0
.b8 0
.b8 4
.b8 29
.b8 0
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 11
.b8 87
.b8 11
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 215
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 114
.b8 109
.b8 115
.b8 95
.b8 108
.b8 97
.b8 121
.b8 101
.b8 114
.b8 110
.b8 111
.b8 114
.b8 109
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 122
.b8 101
.b8 117
.b8 115
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 99
.b8 108
.b8 111
.b8 117
.b8 100
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 49
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 117
.b8 110
.b8 115
.b8 108
.b8 111
.b8 116
.b8 104
.b8 47
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 115
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
.b8 2
.b8 95
.b8 103
.b8 101
.b8 109
.b8 109
.b8 97
.b8 95
.b8 114
.b8 109
.b8 115
.b8 95
.b8 108
.b8 97
.b8 121
.b8 101
.b8 114
.b8 110
.b8 111
.b8 114
.b8 109
.b8 95
.b8 102
.b8 111
.b8 114
.b8 119
.b8 97
.b8 114
.b8 100
.b8 0
.b8 1
.b8 3
.b64 $L__func_begin0
.b64 $L__func_end0
.b32 141
.b8 4
.b32 141
.b64 $L__tmp1
.b64 $L__tmp2
.b8 1
.b8 125
.b8 21
.b8 0
.b8 0
	}
	.section	.debug_loc	{	}
